#!/usr/bin/env python
# coding: utf-8

# In[3]:


import matplotlib.pyplot as plt
import numpy as np
dog = plt.imread('D:\jupyter\dog.jpg')
plt.imshow(dog)
plt.axis('off')


# ![](dog.jpg)

# ![](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1564567124331&di=60f3fb342d378d11c6b68c8c4ab2ab07&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201512%2F15%2F20151215093729_e3wPv.jpeg)

# In[4]:


np.ones(shape = [5,5], dtype= np.int8)


# In[5]:


np.zeros(shape=[2,3,4],dtype=np.float16)


# In[6]:


np.full(shape=[5,5],fill_value=3.14,dtype=np.float16)


# In[7]:


## 单位矩阵
np.eye(N=5)


# In[8]:


##等差数列
np.linspace(0,100,num=101)


# In[9]:


np.arange(0,100,3)


# In[10]:


np.random.randint(0,100,size=10)


# In[11]:


np.random.randint(0,100,size=(5,5))


# In[12]:


## 标准正态分布
## 平均值为0，方差为1
np.random.randn(4,5)


# In[13]:


## round()保留小数
nd = np.random.normal(loc=175,scale=10,size=100000).round(2)
nd


# In[14]:


nd.mean()


# In[15]:


#方差
nd.var()


# In[16]:


#标准差
nd.std()


# In[17]:


## 生成0到1的随机数
np.random.random(100)


# In[18]:


nd


# In[19]:


nd.size


# In[20]:


nd.shape


# In[21]:


nd.ndim ##维度


# In[22]:


nd.dtype


# ## 1索引

# In[23]:


nd2 = np.random.randint(0,150,size=(4,5))
nd2


# In[24]:


nd2[1,1]


# In[25]:


nd2[2]


# ## 2切片

# In[26]:


nd2


# In[27]:


nd2[0:3]


# In[28]:


nd2[-2:]


# In[29]:


nd2[0:3,0:2]


# In[30]:


nd3=nd[:10]
nd3


# In[31]:


## 数据反转
nd3[::-1] 


# In[32]:


## ；两个::进行切片
nd3[::2]


# In[33]:


from PIL import Image


# In[34]:


dog=Image.open('./dog.jpg')
dog


# In[35]:


dog_data=np.array(dog)
## '图片数据是ndarray
# 三维：高 宽 像素
dog_data


# In[36]:


# 行，列，像素
dog_data.shape


# In[37]:


#int8 从-128-127
dog_data.dtype


# In[38]:


np.int8(-129)


# In[39]:


dog_data.max()


# In[40]:


dog_data.min()


# In[41]:


dog2 = dog_data[:,:,::-1]
dog2


# In[42]:


Image.fromarray(dog2)


# In[43]:


Image.fromarray(dog_data[::5,::5])


# In[44]:


# 红绿蓝 0，1,2
Image.fromarray(dog_data[:,:,[1,0,2]])


# In[45]:


dog4=dog_data[:,:,0]


# In[46]:


Image.fromarray(dog4)


# In[47]:


##为了绘图方便 魔法指令
import matplotlib.pyplot as plt 
get_ipython().run_line_magic('matplotlib', 'inline')


# In[48]:


plt.imshow(dog_data)
plt.axis('off')


# In[49]:


plt.imshow(dog_data[::-1])


# In[50]:


plt.imshow(dog_data[::-31,::-31])


# ## 3变形

# In[51]:


nd2


# In[52]:


nd2.reshape(2,10)


# In[53]:


dog_data.shape


# In[54]:


dog5=dog_data.reshape(954,954,3)
plt.imshow(dog5)


# In[55]:


#高度0，宽度1，像素2
#转置，行和列调整
dog6= np.transpose(dog_data,axes=(1,0,2))
plt.imshow(dog6)


# ## 4级联

# In[56]:


nd2


# In[57]:


np.concatenate([nd2,nd2])


# In[58]:


plt.imshow(dog_data)


# In[59]:


dog7=dog_data[:,:300]
plt.imshow(dog7)


# In[60]:


dog8=dog_data[:,500:,::-1]
plt.imshow(dog8)


# In[61]:


print(dog7.shape,dog8.shape)


# In[62]:


display(dog7.shape,dog8.shape)


# In[63]:


#宽度0，高度1，像素2


# In[64]:


dog9 = np.concatenate([dog7,dog8],axis = 1) #axis轴
plt.imshow(dog9)


# In[65]:


##display功能为展示，效果和print相似
nd1=np.random.randint(0,150,size=(4,5))

nd2=np.random.randint(0,150,size=(2,5))

nd3=np.random.randint(0,150,size=(4,8))
display(nd1,nd2,nd3)


# In[66]:


np.concatenate([nd1,nd3],axis=1)


# In[67]:


#horizontally 水平地；横地
nd5=np.hstack([nd1,nd3])


# In[68]:


#vertically 垂直地；直立地;
nd4=np.vstack((nd1,nd2))


# ## 5切分

# In[69]:


nd4


# In[70]:


np.split(nd4,indices_or_sections=3)


# In[71]:


np.split(nd4,indices_or_sections=[1,3])


# In[72]:


np.vsplit(nd4,indices_or_sections=[2])


# In[73]:


nd5


# In[74]:


np.hsplit(nd5,indices_or_sections=[5])


# ## 6副本

# In[75]:


nd7=nd5


# In[76]:


id(nd7)


# In[77]:


id(nd5)


# In[78]:


nd8=nd5.copy()


# In[79]:


print(id(nd8))


# # ndarray聚合操作

# In[80]:


nd5


# In[81]:


nd5.sum()


# In[82]:


nd1


# In[83]:


nd1[0].prod()


# In[84]:


nd1.mean()


# In[85]:


nd1=np.random.randint(0,10,size=(4,5))
nd1


# In[86]:


nd1.mean(axis=1) ##按行


# In[87]:


nd1.mean(axis=0)  ##按列


# In[ ]:





# In[88]:


nd2


# In[89]:


nd2.argmax()  ##最大值所在索引


# In[90]:


nd2.argmax(axis=1) ##按行找最大值所在索引


# In[91]:


index=np.argwhere((nd2>50)&(nd2<100)) ##满足条件值所在索引
index


# In[92]:


for x,y in index:
    print(nd2[x,y])


# In[93]:


nd4


# In[94]:


nd4.any()


# In[95]:


nd4.all()


# In[96]:


nd4[0]=0
nd4


# In[97]:


nd4.all()  ##有0，返回false


# In[ ]:





# In[98]:


nd3


# In[99]:


nd4=nd3.ravel() ##平坦化
nd4


# In[100]:


#对象没有该方法，模块有
np.median(nd4)   ##中位数


# In[101]:


nd4.sort()
nd4


# In[102]:


np.percentile(nd4,q=0)


# In[103]:


np.percentile(nd4,q=50)


# In[109]:


a=np.array([1,3,5,7,9,np.nan,])
a


# In[113]:


np.sum(a)


# In[112]:


np.nansum(a)


# ## 五.ndarray矩阵运算

# #x,y,z=2,1,5
# 
# x+y+z=8
# 
# 2x-y+z=8
# 
# 3x+y-z=2

# In[115]:


X=np.array([[1,1,1],[2,-1,1],[3,1,-1]])
X


# In[116]:


Y=np.array([8,8,2])
Y


# In[117]:


# w是我们需要求解的未知数
w=np.array(['x','y','z'])
w


# In[119]:


#矩阵运算
Xw=Y


# In[121]:


#逆矩阵
X_inv=np.linalg.inv(X)
X_inv


# In[123]:


#矩阵积
np.dot(X_inv,Y)


# ## 广播机制

# In[127]:


nd=np.random.randint(0,1000,size=100)
nd


# In[128]:


nd+10


# In[130]:


nd2=nd.reshape(20,5)
nd2


# In[133]:


nd3=np.arange(5)
nd3


# In[134]:


nd2+nd3


# In[135]:


np.add(nd2,nd3)


# In[137]:


nd4=np.random.randint(0,10,size=(4,5))
nd4


# In[140]:


nd4_mean=nd4.mean(axis=1)
nd4_mean


# In[142]:


nd4-nd4_mean.reshape(4,1)


# ## 六ndarray排序

# In[143]:


nd


# In[145]:


np.sort(nd)


# In[147]:


nd.sort()
nd


# ## 部分排序

# In[149]:


nd=np.random.randint(0,10000,size=100)
nd


# In[154]:


np.partition(nd,kth=5)[:5]


# In[156]:


np.partition(nd,kth=-5)[-5:]


# In[ ]:





# In[ ]:




